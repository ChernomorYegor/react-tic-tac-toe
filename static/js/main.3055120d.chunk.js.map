{"version":3,"sources":["SideChoice.js","Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["SideChoice","chooseSide","windowHeight","document","documentElement","clientHeight","className","style","height","type","onClick","bind","Cell","winner","cellsClicked","cellIndex","cellClick","disabled","Board","side","turnNumber","restart","Array","map","cell","key","App","useState","setSide","setTurnNumber","setWinner","fill","setCellsClicked","isWinner","cells","lines","i","length","a","b","c","chosenSide","cellsCurrent","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3055120d.chunk.js","sourcesContent":["import React from 'react';\n\nfunction SideChoice({ chooseSide }) {\n    const windowHeight = document.documentElement.clientHeight;\n\n    return (\n        <div className=\"side-choice\" style={{height: windowHeight + 'px'}}>\n            <p>Choose your side:</p>\n            <div>\n                <button type=\"text\" onClick={chooseSide.bind(null, 'X')}>X</button>\n                <button type=\"text\" onClick={chooseSide.bind(null, 'O')}>O</button>\n            </div>\n        </div>\n    );\n}\n\nexport default SideChoice;","import React from \"react\";\n\nfunction Cell({ winner, cellsClicked, cellIndex, cellClick }) {\n    return (\n        <>\n        {\n            (cellsClicked[cellIndex] || winner)\n            ? <button type=\"text\" disabled=\"disabled\">{cellsClicked[cellIndex]}</button>\n            : <button type=\"text\" onClick={cellClick.bind(null, cellIndex)}></button>\n        }\n        </>\n    );\n}\n\nexport default Cell;","import React from \"react\";\nimport Cell from \"./Cell\";\n\nfunction Board({ side, turnNumber, winner, cellsClicked, restart, cellClick }) {\n    const windowHeight = document.documentElement.clientHeight;\n\n    function renderStatus() {\n        return (\n            winner ? <p>Winner: {winner}</p> : (turnNumber === 9) ? <p>Draw!</p> : <p>Turn: {side}</p>\n        );\n    }\n\n    function renderBoard() {\n        return (\n            <div className=\"cells\">\n                { Array(...Array(9)).map((cell, cellIndex) =>\n                    <Cell key={cellIndex} winner={winner} cellsClicked={cellsClicked} cellIndex={cellIndex} cellClick={cellClick} />) }\n            </div>\n        );\n    }\n\n    function renderRestart() {\n        return (\n            (turnNumber === 9 || winner) && <button className=\"restart\" type=\"text\" onClick={restart}>Click me to restart</button>\n        );\n    }\n\n    return (\n        <div className=\"board\" style={{height: windowHeight + 'px'}}>\n            {renderStatus()}\n            {renderBoard()}\n            {renderRestart()}\n        </div>\n    );\n}\n\nexport default Board;","import React, {useState} from 'react';\nimport SideChoice from './SideChoice';\nimport Board from \"./Board\";\n\nfunction App() {\n    const [side, setSide] = useState('');\n    const [turnNumber, setTurnNumber] = useState(0);\n    const [winner, setWinner] = useState('');\n    const [cellsClicked, setCellsClicked] = useState(Array(9).fill(null));\n\n    function chooseSide(chosenSide) {\n        setSide(chosenSide);\n    }\n\n    function cellClick(cellIndex) {\n        let cellsCurrent = cellsClicked.slice();\n        cellsCurrent[cellIndex] = side;\n        setCellsClicked(cellsCurrent);\n\n        isWinner(cellsCurrent);\n\n        if (!isWinner(cellsCurrent)) {\n            setTurnNumber(turnNumber + 1);\n            setSide((side === 'X') ? 'O' : 'X');\n        }\n    }\n\n    function restart() {\n        setSide('');\n        setTurnNumber(0);\n        setCellsClicked(Array(9).fill(null));\n        setWinner('');\n    }\n\n    function isWinner(cells) {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6]\n        ];\n        for (let i = 0; i < lines.length; i++) {\n            const [a, b, c] = lines[i];\n            if (cells[a] && cells[a] === cells[b] && cells[a] === cells[c]) {\n                setWinner(cells[a]);\n                return cells[a];\n            }\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            {\n                (side === '')\n                    ? <SideChoice chooseSide={chooseSide} />\n                    : <Board\n                        side={side}\n                        turnNumber={turnNumber}\n                        winner={winner}\n                        cellsClicked={cellsClicked}\n                        restart={restart}\n                        cellClick={cellClick}\n                    />\n            }\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}